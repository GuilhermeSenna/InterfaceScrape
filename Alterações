Futuro:

Criar um programa que reconheça diferenças entre as próximas páginas
Pegar a página principal e 2 seguintes para saber

Input área para múltiplas páginas (mesmo site)

Puxar imagens, links

Botão pra aparecer parte do código, ao clicar ativa True para aparecer e ao clicar novamente False desaparece. Usar Session
> Lógica similar usada para aparecer a tag pai

Pagina para carregar o JSON e analisar os dados

soup.find_all('img') <- Pega todas as imagens da página

print(soup.get_text()) <- Pega todo o testo da página

Usar nova lógica de buscar elementos para:
-> Usar lógica para buscar elementos próximos a ele

Possibilidade de escolher tags/partes por botão

Ex: Se tiver um texto interessante mas algum anúncio no meio que atrapalhe, usar radio ou outro
para selecionar quais quer e quais não quer.


Organização para ao buscar tag e achar seu pai, aparecer de forma ordenada.

##

Busca Externa para interna

head_tag = soup.head
head_tag
# <head><title>The Dormouse's story</title></head>

head_tag.contents
# [<title>The Dormouse's story</title>]

title_tag = head_tag.contents[0]
title_tag
# <title>The Dormouse's story</title>
title_tag.contents
# ['The Dormouse's story']

##


Erros:

-> Printando a quantidade de páginas extras informadas
=> Escolhendo 2 páginas ele printa a index e mais 2 páginas


Exemplos:

Básico:

    Principal: https://www.amazon.com.br/s?k=stephen+king

    Proximas: https://www.amazon.com.br/s?k=stephen+king&page=2
              https://www.amazon.com.br/s?k=stephen+king&page=3

Intermediário:

    Principal: https://www.americanas.com.br/busca/stephen-king

    Proximas: https://www.americanas.com.br/busca/stephen-king?limit=24&offset=24
              https://www.americanas.com.br/busca/stephen-king?limit=24&offset=48

18/05/2021
\
- Adição do SessionState.py usado para guardar o estado atual (variáveis globais)
- Cria arquivo.JSON
- Opcionalidade pro usuário baixar ou não JSON, remover forçado ou n os \n e \t
- Nova janela para Carregamento do JSON



- Possibilidade de salvar O último scrape para outro uso futuro
-> Último scrape salvo em um txt (mas em formato JSON)
=> Tentar Carregar na pág

19/05/2021

- Projeto Comentado
- Corrigido erro de duplicação widget
- Tag <i> adicionada
- Correções no encode/decode UTF8
- Config do IMDB e Amazon Salvas
- Lógica de multipáginas iniciada (falta mais testes)
- Lógica feita para manter os valores antigos ao passar de páginas

20/05/2021 - 21/05/2021

Nova janela pra buscar elementos pelo conteúdo
- Janela criada
- Lógica para buscar elemento (burlando case sensitive)
- Acha a tag pai e seus atributos

21/05/2021 - 22/05/2021

Evolução em buscar elementos pelo conteúdo
- Lógica para guardar e checar se o último link buscado é o mesmo do último usado
> Isso evita de fazer outra requisição, evitando de o IP ser banido e também busca mais rapidamente
- Revisão na lib - Soup Beatiful
- Coleta elementos de tag iguais dinamicamente (falta polir)
- Busca tag mais exterior (falta procurar exemplos para tags ainda mais englobadas)
- Buscar exemplo de função para package

Minerar Manual
- Tag de unicidade adicionada no JSON